const { defineConfig } = require("cypress")
const AdmZip = require('adm-zip')
const fs = require('fs')
const path = require('path')
const crypto = require('crypto')
const { exec } = require('child_process')
const readLine = require('readline')
// const compareImages = require('resemblejs/compareImages')


module.exports = defineConfig({
    projectId: '6dw6bj',
    hideXHR: false,
    e2e: {
        projectRoot: __dirname,
        // We've imported your old cypress plugins here.
        // You may want to clean this up later by importing these.
        async setupNodeEvents(on, config) {

          // Load env vars from cypress.env.json manually
          const envConfig = JSON.parse(fs.readFileSync('cypress.env.json', 'utf8'));
          config.env = { ...config.env, ...envConfig };

          require('rctf/plugins/index.js')(on, config)
          on('task', {
            // Task 1: Unzip a file
            unzipFile({ filepath }) {
              let unzipDestination = 'cypress/downloads/unzipped' // Destination directory for unzipped files
              
              if (!fs.existsSync(filepath)) {
                return { success: false, message: `File not found: ${filepath}` }
              }

              try {
                // Ensure the unzip destination exists
                if (!fs.existsSync(unzipDestination)) {
                  fs.mkdirSync(unzipDestination, { recursive: true })
                }
                                   
                // Unzip the file
                const zip = new AdmZip(filepath)
                zip.extractAllTo(unzipDestination, true)
                return { success: true, message: `Unzipped to ${unzipDestination}` }
              } catch (error) {
                return { success: false, message: `Error unzipping file: ${error.message}` }
              }
            },
            
            // Task 2: Checks the Local storage location for the latest downloaded PDF file
            fetchLatestDownloadLocal({ fileExtension }) {
              // Local storage location
              const edocsPath = config.env.edocs_folder
              const downloadsDir = path.resolve(edocsPath)

              try {
                // Read files in the directory
                const files = fs.readdirSync(downloadsDir)
    
                // Filter files by extension
                const filteredFiles = files.filter(file => path.extname(file) === `.${fileExtension}`)
    
                // If no files are found, return an empty string
                if (filteredFiles.length === 0) {
                  return ''
                }
    
                // Sort files by modification time and get the latest file
                const latestFile = filteredFiles
                  .map(file => ({
                    file,
                    mtime: fs.statSync(path.join(downloadsDir, file)).mtime,
                  }))
                  .sort((a, b) => b.mtime - a.mtime)[0].file
    
                // Return the full path to the latest file
                return path.join(downloadsDir, latestFile)
              } catch (error) {
                throw new Error(`Error fetching latest download: ${error.message}`)
              }
            },
            // Task 3: Checks Hash file
            calculateFileHash({ filePath }) {
              return new Promise((resolve, reject) => {
                const algorithm = 'sha256'
                const hash = crypto.createHash(algorithm)
                const fullFilePath = __dirname + filePath
                const stream = fs.createReadStream(fullFilePath)
    
                stream.on('data', chunk => hash.update(chunk))
                stream.on('end', () => resolve(hash.digest('hex')))
                stream.on('error', reject)
              })
            },
            // Task 4: Delete lines from the file as it contains timestamp or ID
            modifyFile({ filePath, fileType }) {
              return new Promise((resolve, reject) => {
                const fullFilePath = __dirname + filePath
                const tempFilePath = fullFilePath + '.tmp'
                const readStream = fs.createReadStream(fullFilePath, 'utf8')
                const writeStream = fs.createWriteStream(tempFilePath, 'utf8')

                const rl = readLine.createInterface({
                  input: readStream,
                  crlfDelay: Infinity
                })

                readStream.on('error', (err) => {
                  return reject(`Error reading file: ${err.message}`)
                })

                writeStream.on('error', (err) => {
                  return reject(`Error writing file: ${err.message}`)
                })

                rl.on('line', (line) => {
                  let keep = true

                  switch (fileType) {
                    case 'ics':
                      if (line.startsWith('UID') || line.startsWith('DTSTAMP')) keep = false
                      break
                    case 'sas':
                      if (line.startsWith('%let csv_file')) keep = false
                      break
                    case 'sps':
                      if (line.startsWith('FILE HANDLE')) keep = false
                      break
                    case 'r':
                      if (line.startsWith('data')) keep = false
                      break
                    case 'do':
                      if (line.startsWith('label data') || line.startsWith('import delimited')) keep = false
                      break
                    case 'xml':
                      if (line.startsWith('<ODM xmlns') || line.startsWith('<ClinicalData StudyOID')) keep = false
                      break
                    default:
                      return reject(`Unsupported file type: ${fileType}`)
                  }

                  if (keep) {
                    writeStream.write(line + '\n')
                  }
                })

                rl.on('close', () => {
                  writeStream.end()

                  writeStream.on('finish', () => {
                    // Replace original file with modified one
                    fs.rename(tempFilePath, fullFilePath, (err) => {
                      if (err) return reject(`Error renaming temp file: ${err.message}`)
                      resolve('File updated successfully')
                    })
                  })
                })
              })
            }
          })
          return config
        },

        baseUrl: 'https://localhost:8443',
        stepDefinitions: 'cypress/support/step_definitions',
        specPattern: [ 'cypress/features/*.feature',
                       'redcap_rsvc/*/[ABCDE]/*/*.feature',
                       '!redcap_rsvc/*/[ABCDE]/*/*REDUNDANT*.feature'
                     ],
        testIsolation: false,
        experimentalMemoryManagement: false,
        numTestsKeptInMemory: 0,
        retries: {
            runMode: 2,
            openMode: 0
        },
        video: false,
        videoCompression: false,
        trashAssetsBeforeRuns: true,
        viewportWidth: 1600,
        viewportHeight: 1200,
        defaultCommandTimeout: 60000,
        responseTimeout: 60000,
        requestTimeout: 60000,
        chromeWebSecurity: false,
        scrollBehavior: 'bottom',
        watchForFileChanges: true,
        redirectionLimit: 50
    }
})